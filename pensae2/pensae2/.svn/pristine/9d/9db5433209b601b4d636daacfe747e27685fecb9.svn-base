package struts.acoes;

import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import fachada.Fachada;

public class ProfessorAcoes extends DispatchAction {

	
	private static final String fPROFESSORLISTARCURSOS = "fProfessorListarCursos";
	private static final String fPROFESSORDETALHECURSO = "fProfessorDetalheCurso";
	private static final String fPROFESSORORGANIZARAMBULATORIO = "fProfessorOrganizarAmbulatorio";
	private static final String fPROFESSORLISTAESTUDODECASO = "fProfessorListaEstudoDeCaso";
	private static final String fPROFESSORESTUDOCASOOBSREALIDADE = "fProfessorEstudoDeCasoObsRealidade";
	private static final String fPROFESSORESTUDOCASOPONTOSCHAVE= "fProfessorEstudoDeCasoPontosChave";
	private static final String fPROFESSORESTUDOCASOTEORIZACAO= "fProfessorEstudoDeCasoTeorizacao";
	private static final String fPROFESSORESTUDOCASOHIPOTESES= "fProfessorEstudoDeCasoHipoteses";
	private static final String fPROFESSORESTUDOCASOHIPOTESESREFRESH = "fProfessorEstudoDeCasoHipotesesRefresh";
	private static final String fPROFESSORESTUDOCASOAPLICACAO= "fProfessorEstudoDeCasoAplicacao";
	private static final String fPROFESSOROPNIAOCURSO = "fProfessorOpniaoCurso";
	private static final String fPROFESSORFEEDBACKCURSO = "fProfessorFeedBackCurso";

	private Fachada fachada;
	
	public ProfessorAcoes(){
		fachada = Fachada.getInstancia();
	}
	
	
	public ActionForward mostrarTelaListarCursos(ActionMapping map, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		request.getSession().removeAttribute("cursos");//Feito apenas aqui. Deve fazer em outros pacotes
		Professor professor = (Professor)request.getSession().getAttribute("usuario");
		List<CursoProfessor> cursos = fachada.getTodosCursosProfessor(professor);
		request.getSession().setAttribute("cursos", cursos);
		
		return map.findForward(fPROFESSORLISTARCURSOS);
	}
	
	public ActionForward criarNovoCurso(ActionMapping map, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		try{
			
			Professor professor = (Professor)request.getSession().getAttribute("usuario");
			//Feito apenas aqui. Deve fazer em outros pacotes
			Curso curso = new Curso(request.getParameter("cursoId"), request.getParameter("cursoTitulo"), request.getParameter("cursoObjetivos"),
					request.getParameter("cursoEmenta"), request.getParameter("cursoDataInicio"), request.getParameter("cursoDataFim"),
					request.getParameter("cursoStatus"), Professor professor, List<Arquivo> arquivos);
			
			fachada.inserirCurso(curso);
			
			request.setAttribute("mensagem", "Curso criado com Sucesso!");
			
		}catch(Exception e){
			e.printStackTrace();
			request.setAttribute("mensagem", "Erro ao criar curso, tente novamente mais tarde!");
		}
		
		return map.findForward(fALUNOLISTARCURSOS);
	}
	
	public ActionForward mostrarTelaDetalheCurso(ActionMapping map, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		try{
			String id = ((DynaActionForm)form).getString("idMatricula");
			MatriculaCursoAluno matricula = fachada.getMatriculaAlunoCursoPorId(Integer.parseInt(id));
			request.getSession().setAttribute("matricula", matricula);
			request.getSession().removeAttribute("matriculas");
			request.getSession().setAttribute("cursosNovaMatricula", null);
			
		}catch(Exception ex){
			ex.printStackTrace();
			request.setAttribute("mensagem", "Erro de conexão com o Banco de Dados!");
		}
		
		return map.findForward(fALUNODETALHECURSO);
	}
	
	public ActionForward mostrarTelaListaEstudosDeCaso(ActionMapping map, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		try{
			
			MatriculaCursoAluno matricula = (MatriculaCursoAluno)request.getSession().getAttribute("matricula");
			List<EstudoDeCaso> estudosCasos = fachada.listarEstudosDeCasosPorCurso(matricula.getCurso());
			request.getSession().setAttribute("estudosDeCasos", estudosCasos);
			
		}catch(Exception ex){
			ex.printStackTrace();
			request.setAttribute("mensagem", "Erro de conexão com o Banco de Dados!");
		}
		
		return map.findForward(fALUNOLISTAESTUDODECASO);
	}
	
	public ActionForward mostrarTelaAmbulatorio(ActionMapping map, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		try{
			carregarMateriaisAmbulatorio(request);
			
		}catch(Exception ex){
			ex.printStackTrace();
			request.setAttribute("mensagem", "Erro de conexão com o Banco de Dados!");
		}
		
		return map.findForward(fALUNOORGANIZARAMBULATORIO);
	}

	public ActionForward organizarAmbulatorio(ActionMapping map, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
	
		try{
			String[]  materiaisGeral = ((DynaActionForm)form).getStrings("mobilia");
			String[]  materiaisClinico = ((DynaActionForm)form).getStrings("corrente");
			String[]  materiaisConcorrente = ((DynaActionForm)form).getStrings("clinico");
			
			List<Material> materiaisAmbulatorio = new ArrayList<Material>();
			for (int i = 0; i < materiaisGeral.length; i++) {
				materiaisAmbulatorio.add(new Material(Integer.parseInt(materiaisGeral[i])));
			}
			for (int i = 0; i < materiaisClinico.length; i++) {
				materiaisAmbulatorio.add(new Material(Integer.parseInt(materiaisClinico[i])));
			}
			for (int i = 0; i < materiaisConcorrente.length; i++) {
				materiaisAmbulatorio.add(new Material(Integer.parseInt(materiaisConcorrente[i])));
			}
			
			MatriculaCursoAluno matricula = (MatriculaCursoAluno) request.getSession().getAttribute("matricula");
			Ambulatorio ambulatorio = matricula.getAmbulatorio();
			ambulatorio.setMateriais(materiaisAmbulatorio);
			fachada.organizarAmbulatorioAluno(ambulatorio);
			
			request.setAttribute("mensagem", "Ambulatório salvo com sucesso");
			
			carregarMateriaisAmbulatorio(request);
			
			
		}catch(Exception ex){
			ex.printStackTrace();
			request.setAttribute("mensagem", "Erro de conexão com o Banco de Dados!");
		}
		
		return map.findForward(fALUNOORGANIZARAMBULATORIO);
		
	}
	
	public ActionForward  mostrarTelaObservacaoRealidade(ActionMapping map, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		try{
			String idEstudoCaso = ((DynaActionForm)form).getString("idEstudoCaso");
			List<EstudoDeCaso> estudosCasos = (List<EstudoDeCaso>) request.getSession().getAttribute("estudosDeCasos");
			MatriculaCursoAluno matricula = (MatriculaCursoAluno) request.getSession().getAttribute("matricula");
			EstudoDeCaso estudoEscolhido = null;
			for (EstudoDeCaso estudoDeCaso : estudosCasos) {
				if(estudoDeCaso.getId() == Integer.parseInt(idEstudoCaso)){
					estudoEscolhido = estudoDeCaso;
				}
			}
			ArcoMaguerezEstudoDeCaso arcoMaguerez = fachada.getArcoMaguerezPorMatriculaCursoEstudoCaso(matricula, estudoEscolhido);
			if(arcoMaguerez == null){
				arcoMaguerez = new ArcoMaguerezEstudoDeCaso(ArcoMaguerezEstudoDeCaso.OBS_REALIDADE, matricula, estudoEscolhido, new PontosChave(), new Teorizacao(), new HipotesesDeSolucao(), new Aplicacao());
				arcoMaguerez = fachada.inserirArcoMaguerez(arcoMaguerez);
			}
			request.getSession().setAttribute("arcoMaguerez", arcoMaguerez);
			request.getSession().setAttribute("estudoDeCaso", estudoEscolhido);
			
		}catch(Exception ex){
			ex.printStackTrace();
			request.setAttribute("mensagem", "Erro de conexão com o Banco de Dados!");
		}
		
		return map.findForward(fALUNOESTUDOCASOOBSREALIDADE);
	}
	
	public ActionForward mostrarTelaPontosChave(ActionMapping map, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		ActionForward retorno = null;
		try{
			
			ArcoMaguerezEstudoDeCaso arcoMaguerez = (ArcoMaguerezEstudoDeCaso)  request.getSession().getAttribute("arcoMaguerez");
			
			if(arcoMaguerez.getFaseDoArco() >= ArcoMaguerezEstudoDeCaso.PONTOS_CHAVE){
				List<Determinante> determinantes = fachada.buscarDeterminantePorPontoChave(arcoMaguerez.getPontosChave());
				request.getSession().setAttribute("determinantes", determinantes);
				retorno =  map.findForward(fALUNOESTUDOCASOPONTOSCHAVE);
			}else{
				request.setAttribute("mensagem", "Você ainda não finalizou a fase Observação da Realidade para visualizar esta Fase do Arco");
				retorno =  map.findForward(fALUNOESTUDOCASOOBSREALIDADE);
			}
		}catch(Exception ex){
			ex.printStackTrace();
			request.setAttribute("mensagem", "Erro de conexão com o Banco de Dados!");
		}	
		
		return retorno;
	}
	
	
	public ActionForward  avancarObservacaoRealidade(ActionMapping map, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		try{
			
			ArcoMaguerezEstudoDeCaso arcoMaguerez = (ArcoMaguerezEstudoDeCaso)  request.getSession().getAttribute("arcoMaguerez");
			if(arcoMaguerez.getFaseDoArco() < ArcoMaguerezEstudoDeCaso.PONTOS_CHAVE){
				arcoMaguerez.setFaseDoArco(ArcoMaguerezEstudoDeCaso.PONTOS_CHAVE);
				arcoMaguerez = fachada.atualizarArcoMaguerez(arcoMaguerez);
				request.setAttribute("mensagem", "Fase Observação da Realidade concluída com sucesso!");
			}
			List<Determinante> determinantes = fachada.buscarDeterminantePorPontoChave(arcoMaguerez.getPontosChave());
			
			request.getSession().setAttribute("arcoMaguerez", arcoMaguerez);
			request.getSession().setAttribute("determinantes", determinantes);
			
		}catch(Exception ex){
			ex.printStackTrace();
			request.setAttribute("mensagem", "Erro de conexão com o Banco de Dados!");
		}
		
		return map.findForward(fALUNOESTUDOCASOPONTOSCHAVE);
	}
	
	public ActionForward salvarPontosChaves(ActionMapping map, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		try{
			ArcoMaguerezEstudoDeCaso arcoMaguerez = (ArcoMaguerezEstudoDeCaso)  request.getSession().getAttribute("arcoMaguerez");
			
			if(arcoMaguerez.getFaseDoArco() <= ArcoMaguerezEstudoDeCaso.PONTOS_CHAVE){
				String[]  determinantes = ((DynaActionForm)form).getStrings("determinantes");
				List<Determinante> listDeterminantes= new ArrayList<Determinante>();
				
				for (String determ : determinantes) {
					String determinanteTemp = determ.split("##")[0];
					String justificativaTemp = determ.split("##")[1];
					Determinante determinanteAdd = new Determinante(determinanteTemp, justificativaTemp, arcoMaguerez.getPontosChave());
					listDeterminantes.add(determinanteAdd);
				}
				
				List<Determinante> determinantesAdicionados = fachada.inserirDeterminantePontosChave(listDeterminantes, arcoMaguerez.getPontosChave());
				request.getSession().setAttribute("determinantes", determinantesAdicionados);
				
				arcoMaguerez = fachada.atualizarArcoMaguerez(arcoMaguerez);
				
				request.setAttribute("mensagem", "Dados salvos com Sucesso!");
			}
			
		}catch(Exception ex){
			ex.printStackTrace();
			request.setAttribute("mensagem", "Erro de conexão com o Banco de Dados!");
		}
		
		return map.findForward(fALUNOESTUDOCASOPONTOSCHAVE);
	}
	
	
	public ActionForward avancarPontosChaves(ActionMapping map, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		ActionForward retorno = map.findForward(fALUNOESTUDOCASOPONTOSCHAVE);
		
		try{
			ArcoMaguerezEstudoDeCaso arcoMaguerez = (ArcoMaguerezEstudoDeCaso)  request.getSession().getAttribute("arcoMaguerez");
	
			if(arcoMaguerez.getFaseDoArco() <= ArcoMaguerezEstudoDeCaso.PONTOS_CHAVE){
				String[]  determinantes = ((DynaActionForm)form).getStrings("determinantes");
				List<Determinante> listDeterminantes= new ArrayList<Determinante>();
				
				for (String determ : determinantes) {
					String determinanteTemp  = "";
					if(determ.split("##")[0] != null){
						determinanteTemp = determ.split("##")[0];
					}
					String justificativaTemp = "";
					if(determ.split("##").length == 2){
						justificativaTemp = determ.split("##")[1];
					}
					
					if(!determinanteTemp.equals("")){
						Determinante determinanteAdd = new Determinante(determinanteTemp, justificativaTemp, arcoMaguerez.getPontosChave());
						listDeterminantes.add(determinanteAdd);
					}
				}
				
				List<Determinante> determinantesAdicionados = fachada.inserirDeterminantePontosChave(listDeterminantes, arcoMaguerez.getPontosChave());
				request.getSession().setAttribute("determinantes", determinantesAdicionados);
				
					arcoMaguerez.setFaseDoArco(ArcoMaguerezEstudoDeCaso.TEORIZACAO);
					arcoMaguerez = fachada.atualizarArcoMaguerez(arcoMaguerez);
				
				request.setAttribute("mensagem", "Fase Pontos-Chave concluída com sucesso!");
			}
			retorno = map.findForward(fALUNOESTUDOCASOTEORIZACAO);
			
		}catch(Exception ex){
			ex.printStackTrace();
			request.setAttribute("mensagem", "Erro de conexão com o Banco de Dados!");
		}
		
		return retorno;
	}
	
	public ActionForward mostrarTelaTeorizacao(ActionMapping map, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		ActionForward retorno = null;
		try{
			
			ArcoMaguerezEstudoDeCaso arcoMaguerez = (ArcoMaguerezEstudoDeCaso)  request.getSession().getAttribute("arcoMaguerez");
			
			if(arcoMaguerez.getFaseDoArco() >= ArcoMaguerezEstudoDeCaso.TEORIZACAO){
				retorno =  map.findForward(fALUNOESTUDOCASOTEORIZACAO);
			}else{
				request.setAttribute("mensagem", "Você ainda não finalizou a fase Pontos-Chave para visualizar esta Fase do Arco");
				if(arcoMaguerez.getFaseDoArco() == ArcoMaguerezEstudoDeCaso.OBS_REALIDADE){
					retorno =  map.findForward(fALUNOESTUDOCASOOBSREALIDADE);
				}else{
					retorno =  map.findForward(fALUNOESTUDOCASOPONTOSCHAVE);
				}
			}
		}catch(Exception ex){
			ex.printStackTrace();
			request.setAttribute("mensagem", "Erro de conexão com o Banco de Dados!");
		}	
		
		return retorno;
	}
	
	public ActionForward salvarTeorizacao(ActionMapping map, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		ActionForward retorno = null;
		try{
			
			ArcoMaguerezEstudoDeCaso arcoMaguerez = (ArcoMaguerezEstudoDeCaso)  request.getSession().getAttribute("arcoMaguerez");
			Teorizacao teorizacao = arcoMaguerez.getTeorizacao(); 
			
			if(arcoMaguerez.getFaseDoArco() >= ArcoMaguerezEstudoDeCaso.HIPOTESES){
//				retorno = map.findForward(fALUNOESTUDOCASOTEORIZACAO);
				retorno = map.findForward(fALUNOESTUDOCASOTEORIZACAO);
			}else{
				FileUploadForm fileUploadForm = (FileUploadForm)form;
				 
			    FormFile file = fileUploadForm.getFile();
			   
			   if(file.getFileName() != null && !file.getFileName().equals("")){
				   if(validarArquivo(file.getFileName())){
					   if( file.getFileSize() < 16777216){
						   Arquivo arquivo = new Arquivo();
						   arquivo.setDadosArqv(file.getFileData());
						   arquivo.setExtensao(file.getContentType());
						   arquivo.setNomeArqv(file.getFileName());
						   
						   List<Arquivo> arquivos = new ArrayList<Arquivo>();
						   arquivos.add(arquivo);
						   
						   teorizacao.setArquivos(arquivos);
						   teorizacao = fachada.atualizarTeorizacao(teorizacao);
						   arcoMaguerez.setTeorizacao(teorizacao);
						   
						   arcoMaguerez = fachada.atualizarArcoMaguerez(arcoMaguerez);
						   
						   request.getSession().setAttribute("arcoMaguerez", arcoMaguerez);
						   request.setAttribute("mensagem", "Dados salvos com sucesso!");
					   }else{
						   request.setAttribute("mensagem", "Tamanho do arquivo maior que 16Mb! ");
					   }
				   }else{
					   request.setAttribute("mensagem", "Tipo de arquivo inválido! Escolha apenas .doc, .docx ou .pdf");
				   }
			    }else if(file.getFileName().equals("") && (teorizacao.getArquivos() == null || teorizacao.getArquivos().isEmpty())){
			    	request.setAttribute("mensagem", "Nenhum arquivo foi selecionado!");
			    }
				retorno = map.findForward(fALUNOESTUDOCASOTEORIZACAO);
			}
		}catch(Exception ex){
			ex.printStackTrace();
			request.setAttribute("mensagem", "Erro de conexão com o Banco de Dados!");
		}
		return retorno;
	}
	
	public ActionForward avancarTeorizacao(ActionMapping map, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		ActionForward retorno = null;
		try{
			
			ArcoMaguerezEstudoDeCaso arcoMaguerez = (ArcoMaguerezEstudoDeCaso)  request.getSession().getAttribute("arcoMaguerez");
			Teorizacao teorizacao = arcoMaguerez.getTeorizacao(); 
			
			if(arcoMaguerez.getFaseDoArco() >= ArcoMaguerezEstudoDeCaso.HIPOTESES){
				retorno = map.findForward(fALUNOESTUDOCASOHIPOTESES);
			}else{
				FileUploadForm fileUploadForm = (FileUploadForm)form;
				 
			    FormFile file = fileUploadForm.getFile();
			   
			   if(file.getFileName() != null && !file.getFileName().equals("")){
				   if(validarArquivo(file.getFileName())){
					   if( file.getFileSize() < 16777216){
						   Arquivo arquivo = new Arquivo();
						   arquivo.setDadosArqv(file.getFileData());
						   arquivo.setExtensao(file.getContentType());
						   arquivo.setNomeArqv(file.getFileName());
						   
						   List<Arquivo> arquivos = new ArrayList<Arquivo>();
						   arquivos.add(arquivo);
						   
						   teorizacao.setArquivos(arquivos);
						   teorizacao = fachada.atualizarTeorizacao(teorizacao);
						   arcoMaguerez.setTeorizacao(teorizacao);
						   
						   arcoMaguerez.setFaseDoArco(ArcoMaguerezEstudoDeCaso.HIPOTESES);
						   arcoMaguerez = fachada.atualizarArcoMaguerez(arcoMaguerez);
						   
						   request.getSession().setAttribute("arcoMaguerez", arcoMaguerez);
						   request.setAttribute("mensagem", "Fase Teorização concluída com sucesso!");
					   }else{
						   request.setAttribute("mensagem", "Tamanho do arquivo maior que 16Mb! ");
					   }
				   }else{
					   request.setAttribute("mensagem", "Tipo de arquivo inválido! Escolha apenas .doc, .docx ou .pdf");
				   }
			    }else if(file.getFileName().equals("") && (teorizacao.getArquivos() == null || teorizacao.getArquivos().isEmpty())){
			    	request.setAttribute("mensagem", "Nenhum arquivo foi selecionado!");
			    }
			   if(arcoMaguerez.getTeorizacao().getArquivos() == null || arcoMaguerez.getTeorizacao().getArquivos().isEmpty()){
				   request.setAttribute("mensagem", "Você não selecionou nenhum arquivo para avançar na fase");
				   retorno = map.findForward(fALUNOESTUDOCASOTEORIZACAO);
			   }else{
				   if(arcoMaguerez.getFaseDoArco() == ArcoMaguerezEstudoDeCaso.TEORIZACAO){
					   arcoMaguerez.setFaseDoArco(ArcoMaguerezEstudoDeCaso.HIPOTESES);
					   arcoMaguerez = fachada.atualizarArcoMaguerez(arcoMaguerez);
					   request.setAttribute("mensagem", "Fase Teorização concluída com sucesso!");
				   }
				   retorno = map.findForward(fALUNOESTUDOCASOHIPOTESESREFRESH);
			   }
			}
		}catch(Exception ex){
			ex.printStackTrace();
			request.setAttribute("mensagem", "Erro de conexão com o Banco de Dados!");
		}
		return retorno;
	}
	
	public ActionForward mostrarTelaHipoteses(ActionMapping map, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		ActionForward retorno = null;
		try{
			
			ArcoMaguerezEstudoDeCaso arcoMaguerez = (ArcoMaguerezEstudoDeCaso)  request.getSession().getAttribute("arcoMaguerez");
			List<DeterminanteHipoteses> determinantesHipoteses = fachada.buscarDeterminantesHipotesesPorEstudoCaso(arcoMaguerez.getEstudoDeCaso());
			request.getSession().setAttribute("determinantesHipoteses", determinantesHipoteses);
			
			List<Diagnostico> diagnosticos = fachada.buscarDiagnosticoPorHipotesesDeSolucao(arcoMaguerez.getHipotesesDeSolucao());
			request.getSession().setAttribute("diagnosticos", diagnosticos);
			
			if(arcoMaguerez.getFaseDoArco() >= ArcoMaguerezEstudoDeCaso.HIPOTESES){
				retorno =  map.findForward(fALUNOESTUDOCASOHIPOTESES);
			}else{
				request.setAttribute("mensagem", "Você ainda não finalizou a fase anterior para visualizar esta Fase do Arco");
				if(arcoMaguerez.getFaseDoArco() == ArcoMaguerezEstudoDeCaso.OBS_REALIDADE){
					retorno =  map.findForward(fALUNOESTUDOCASOOBSREALIDADE);
				}else if(arcoMaguerez.getFaseDoArco() == ArcoMaguerezEstudoDeCaso.PONTOS_CHAVE){
					retorno =  map.findForward(fALUNOESTUDOCASOPONTOSCHAVE);
				}else{
					retorno = map.findForward(fALUNOESTUDOCASOTEORIZACAO);
				}
			}
		}catch(Exception ex){
			ex.printStackTrace();
			request.setAttribute("mensagem", "Erro de conexão com o Banco de Dados!");
		}	
		
		return retorno;
	}
	
	public ActionForward salvarHipoteses(ActionMapping map, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		ActionForward retorno = null;
		try{
			
			ArcoMaguerezEstudoDeCaso arcoMaguerez = (ArcoMaguerezEstudoDeCaso)  request.getSession().getAttribute("arcoMaguerez");
			List<DeterminanteHipoteses> determinantesHipoteses = fachada.buscarDeterminantesHipotesesPorEstudoCaso(arcoMaguerez.getEstudoDeCaso());
			request.getSession().setAttribute("determinantesHipoteses", determinantesHipoteses);
			
			List<Diagnostico> diagnosticos = fachada.buscarDiagnosticoPorHipotesesDeSolucao(arcoMaguerez.getHipotesesDeSolucao());
			request.getSession().setAttribute("diagnosticos", diagnosticos);
			
			if(arcoMaguerez.getFaseDoArco() >= ArcoMaguerezEstudoDeCaso.HIPOTESES){
				retorno =  map.findForward(fALUNOESTUDOCASOHIPOTESES);
				request.setAttribute("mensagem", "Dados salvos com sucesso!");
			}else{
				request.setAttribute("mensagem", "Você ainda não finalizou a fase anterior para visualizar esta Fase do Arco");
				if(arcoMaguerez.getFaseDoArco() == ArcoMaguerezEstudoDeCaso.OBS_REALIDADE){
					retorno =  map.findForward(fALUNOESTUDOCASOOBSREALIDADE);
				}else if(arcoMaguerez.getFaseDoArco() == ArcoMaguerezEstudoDeCaso.PONTOS_CHAVE){
					retorno =  map.findForward(fALUNOESTUDOCASOPONTOSCHAVE);
				}else{
					retorno = map.findForward(fALUNOESTUDOCASOTEORIZACAO);
				}
			}
		}catch(Exception ex){
			ex.printStackTrace();
			request.setAttribute("mensagem", "Erro de conexão com o Banco de Dados!");
		}	
		
		return retorno;
	}
	
	public ActionForward avancarHipoteses(ActionMapping map, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		ActionForward retorno = null;
		try{
			
			ArcoMaguerezEstudoDeCaso arcoMaguerez = (ArcoMaguerezEstudoDeCaso)  request.getSession().getAttribute("arcoMaguerez");
			List<DeterminanteHipoteses> determinantesHipoteses = fachada.buscarDeterminantesHipotesesPorEstudoCaso(arcoMaguerez.getEstudoDeCaso());
			request.getSession().setAttribute("determinantesHipoteses", determinantesHipoteses);
			
			List<Diagnostico> diagnosticos = fachada.buscarDiagnosticoPorHipotesesDeSolucao(arcoMaguerez.getHipotesesDeSolucao());
			request.getSession().setAttribute("diagnosticos", diagnosticos);
			
			if(arcoMaguerez.getFaseDoArco() == ArcoMaguerezEstudoDeCaso.HIPOTESES){
				arcoMaguerez.setFaseDoArco(ArcoMaguerezEstudoDeCaso.APLICACAO);
			    arcoMaguerez = fachada.atualizarArcoMaguerez(arcoMaguerez);
				
			    request.setAttribute("mensagem", "Fase Hipóteses de Solução concluída com sucesso!");
			    retorno =  map.findForward(fALUNOESTUDOCASOAPLICACAO);
			}else if(arcoMaguerez.getFaseDoArco() > ArcoMaguerezEstudoDeCaso.HIPOTESES){
				retorno =  map.findForward(fALUNOESTUDOCASOAPLICACAO);
			}else{
				request.setAttribute("mensagem", "Você ainda não finalizou a fase anterior para visualizar esta Fase do Arco");
				if(arcoMaguerez.getFaseDoArco() == ArcoMaguerezEstudoDeCaso.OBS_REALIDADE){
					retorno =  map.findForward(fALUNOESTUDOCASOOBSREALIDADE);
				}else if(arcoMaguerez.getFaseDoArco() == ArcoMaguerezEstudoDeCaso.PONTOS_CHAVE){
					retorno =  map.findForward(fALUNOESTUDOCASOPONTOSCHAVE);
				}else{
					retorno = map.findForward(fALUNOESTUDOCASOTEORIZACAO);
				}
			}
		}catch(Exception ex){
			ex.printStackTrace();
			request.setAttribute("mensagem", "Erro de conexão com o Banco de Dados!");
		}	
		
		return retorno;
	}
	
	public ActionForward adicionarDiagnostico(ActionMapping map, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
	
		try {
				
			String determinante = ((DynaActionForm)form).getString("determinante");
			String termoautocomplete = ((DynaActionForm)form).getString("termoautocomplete");
			String texto = ((DynaActionForm)form).getString("texto");
			
			if(determinante != null && !determinante.equals("")){
				DeterminanteHipoteses determinanteHipoteses = new DeterminanteHipoteses(Integer.parseInt(determinante));
				if(termoautocomplete.contains("[") && termoautocomplete.contains("]")){
					ArcoMaguerezEstudoDeCaso arcoMaguerez = (ArcoMaguerezEstudoDeCaso)  request.getSession().getAttribute("arcoMaguerez");
					String idTermo = termoautocomplete.substring(termoautocomplete.indexOf("[")+1, termoautocomplete.indexOf("]"));
					Cipe cipe = new Cipe(Integer.parseInt(idTermo));
					
					Diagnostico diagnosticoAdd = new Diagnostico(cipe, texto, determinanteHipoteses, arcoMaguerez.getHipotesesDeSolucao());
					diagnosticoAdd = fachada.adicionarDiagnostico(diagnosticoAdd);
					
					fachada.limparSessaoHibernate();
					List<Diagnostico> diagnosticos = fachada.buscarDiagnosticoPorHipotesesDeSolucao(arcoMaguerez.getHipotesesDeSolucao());
					request.getSession().setAttribute("diagnosticos", diagnosticos);
					
					 request.setAttribute("mensagem", "Diagnóstico inserido com sucesso!");
				}else{
					request.setAttribute("mensagem", "Você não selecionou o Termo do Eixo Foco adequadamente");
				}
			}else{
				request.setAttribute("mensagem", "Você deve esperar o processo de Regulaçao da aprendizagem onde o professor irá cadastrar o determinantes selecionados");
			}
			
		 }catch(Exception ex){
			 ex.printStackTrace();
			 request.setAttribute("mensagem", "Erro de conexão com o Banco de Dados!");
		}
    	  return  map.findForward(fALUNOESTUDOCASOHIPOTESES);
	}
	
	public ActionForward editarDiagnostico(ActionMapping map, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
	
		try {
			
			String idDiagnostico = ((DynaActionForm)form).getString("idDiagnostico");
			String determinante = ((DynaActionForm)form).getString("determinante");
			String termoautocomplete = ((DynaActionForm)form).getString("termo2autocomplete");
			String texto = ((DynaActionForm)form).getString("texto");
			
			if(determinante != null && !determinante.equals("") && idDiagnostico != null && !idDiagnostico.equals("")){
				DeterminanteHipoteses determinanteHipoteses = new DeterminanteHipoteses(Integer.parseInt(determinante));
				if(termoautocomplete.contains("[") && termoautocomplete.contains("]")){
					String idTermo = termoautocomplete.substring(termoautocomplete.indexOf("[")+1, termoautocomplete.indexOf("]"));
					Cipe cipe = new Cipe(Integer.parseInt(idTermo));
					ArcoMaguerezEstudoDeCaso arcoMaguerez = (ArcoMaguerezEstudoDeCaso)  request.getSession().getAttribute("arcoMaguerez");
					
					Diagnostico diagnosticoEdit = new Diagnostico(cipe, texto, determinanteHipoteses, arcoMaguerez.getHipotesesDeSolucao());
					diagnosticoEdit.setId(Integer.parseInt(idDiagnostico));
					diagnosticoEdit = fachada.editarDiagnostico(diagnosticoEdit);

					fachada.atualizar();
					fachada.limparSessaoHibernate();
					List<Diagnostico> diagnosticos = fachada.buscarDiagnosticoPorHipotesesDeSolucao(arcoMaguerez.getHipotesesDeSolucao());
					request.getSession().setAttribute("diagnosticos", diagnosticos);
					
					 request.setAttribute("mensagem", "Diagnóstico editado com sucesso!");
				}else{
					request.setAttribute("mensagem", "Você não selecionou o Termo do Eixo Foco adequadamente");
				}
			}else{
				request.setAttribute("mensagem", "Você deve esperar o processo de Regulaçao da aprendizagem onde o professor irá cadastrar o determinantes selecionados");
			}
			
		 }catch(Exception ex){
			 ex.printStackTrace();
			 request.setAttribute("mensagem", "Erro de conexão com o Banco de Dados!");
		}
    	  return  map.findForward(fALUNOESTUDOCASOHIPOTESES);
	}
	
	public ActionForward removerDiagnostico(ActionMapping map, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
	
		try {
			String idDiagnostico = ((DynaActionForm)form).getString("idDiagnostico");
			if(idDiagnostico != null  && !idDiagnostico.equals("")){
				Diagnostico diagnosticoRemover = new Diagnostico(Integer.parseInt(idDiagnostico));
				fachada.removerDiagnostico(diagnosticoRemover);
				
				fachada.atualizar();
				request.setAttribute("mensagem", "Diagnóstico removido com sucesso!");
			}
		
		}catch(Exception ex){
			 ex.printStackTrace();
			 request.setAttribute("mensagem", "Erro de conexão com o Banco de Dados!");
		}
    	  return  map.findForward(fALUNOESTUDOCASOHIPOTESESREFRESH);
	}
	
	public ActionForward adicionarMetaDiagnostico(ActionMapping map, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
	
		try {
			String idDiagnostico = ((DynaActionForm)form).getString("idDiagnostico");
			if(idDiagnostico != null && !idDiagnostico.equals("")){
				Diagnostico diagnostico = new Diagnostico(Integer.parseInt(idDiagnostico));
				String meta = ((DynaActionForm)form).getString("meta");
				
				Meta metaAdd = new Meta(diagnostico, meta);
				fachada.inserirMeta(metaAdd);
				
				fachada.atualizar();
				fachada.limparSessaoHibernate();
				ArcoMaguerezEstudoDeCaso arcoMaguerez = (ArcoMaguerezEstudoDeCaso)  request.getSession().getAttribute("arcoMaguerez");
				List<Diagnostico> diagnosticos = fachada.buscarDiagnosticoPorHipotesesDeSolucao(arcoMaguerez.getHipotesesDeSolucao());
				request.getSession().setAttribute("diagnosticos", diagnosticos);
    			request.setAttribute("mensagem", "Meta adicionada com sucesso!");
			}
		
		}catch(Exception ex){
			 ex.printStackTrace();
			 request.setAttribute("mensagem", "Erro de conexão com o Banco de Dados!");
		}
    	  return  map.findForward(fALUNOESTUDOCASOHIPOTESESREFRESH);
	}
	
	public ActionForward editarMetaDiagnostico(ActionMapping map, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
	
		try {
			
			String idMetaDiagnostico = ((DynaActionForm)form).getString("idMetaDiagnostico");
			String idDiagnostico = ((DynaActionForm)form).getString("idDiagnostico");
			String meta = ((DynaActionForm)form).getString("meta");
			
			if(idMetaDiagnostico != null && !idMetaDiagnostico.equals("") && idDiagnostico != null && !idDiagnostico.equals("")){
				Diagnostico diagnostico = new Diagnostico(Integer.parseInt(idDiagnostico));
				Meta metaEdit = new Meta(Integer.parseInt(idMetaDiagnostico), diagnostico, meta);
				fachada.editarMeta(metaEdit);
				
				fachada.atualizar();
				fachada.limparSessaoHibernate();
				ArcoMaguerezEstudoDeCaso arcoMaguerez = (ArcoMaguerezEstudoDeCaso)  request.getSession().getAttribute("arcoMaguerez");
				List<Diagnostico> diagnosticos = fachada.buscarDiagnosticoPorHipotesesDeSolucao(arcoMaguerez.getHipotesesDeSolucao());
				request.getSession().setAttribute("diagnosticos", diagnosticos);
				
				request.setAttribute("mensagem", "Meta editada com sucesso!");
			}else{
				request.setAttribute("mensagem", "Erro de conexão com o Banco de Dados!");
			}
			
		 }catch(Exception ex){
			 ex.printStackTrace();
			 request.setAttribute("mensagem", "Erro de conexão com o Banco de Dados!");
		}
    	  return  map.findForward(fALUNOESTUDOCASOHIPOTESES);
	}
	
	public ActionForward removerMetaDiagnostico(ActionMapping map, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
	
		try {
			String idMetaDiagnostico = ((DynaActionForm)form).getString("idMetaDiagnostico");
			if(idMetaDiagnostico != null  && !idMetaDiagnostico.equals("")){
				Meta metaRemover = new Meta(Integer.parseInt(idMetaDiagnostico));
				fachada.removerMetaDiagnostico(metaRemover);
				
				fachada.atualizar();
				request.setAttribute("mensagem", "Meta removida com sucesso!");
			}
		
		}catch(Exception ex){
			 ex.printStackTrace();
			 request.setAttribute("mensagem", "Erro de conexão com o Banco de Dados!");
		}
    	  return  map.findForward(fALUNOESTUDOCASOHIPOTESESREFRESH);
	}
	
	public ActionForward adicionarIntervencaoDiagnostico(ActionMapping map, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
	
		try {
				
			String idMetaDiagnostico = ((DynaActionForm)form).getString("idMetaDiagnostico");
			String idDiagnostico = ((DynaActionForm)form).getString("idDiagnostico");
			String termo3autocomplete = ((DynaActionForm)form).getString("termo3autocomplete");
			String texto = ((DynaActionForm)form).getString("texto");
			
			if(idMetaDiagnostico != null && !idMetaDiagnostico.equals("")){
				Meta meta = new Meta(Integer.parseInt(idMetaDiagnostico));
				if(termo3autocomplete.contains("[") && termo3autocomplete.contains("]")){
					String idTermo = termo3autocomplete.substring(termo3autocomplete.indexOf("[")+1, termo3autocomplete.indexOf("]"));
					Cipe cipe = new Cipe(Integer.parseInt(idTermo));
					
					Intervencao intervencaoAdd = new Intervencao(meta, cipe, texto);
					intervencaoAdd = fachada.adicionarIntervencaoMetaDiagnostico(intervencaoAdd);
					
					fachada.limparSessaoHibernate();
					ArcoMaguerezEstudoDeCaso arcoMaguerez = (ArcoMaguerezEstudoDeCaso)  request.getSession().getAttribute("arcoMaguerez");
					List<Diagnostico> diagnosticos = fachada.buscarDiagnosticoPorHipotesesDeSolucao(arcoMaguerez.getHipotesesDeSolucao());
					request.getSession().setAttribute("diagnosticos", diagnosticos);
					
					 request.setAttribute("mensagem", "Intervenção inserida com sucesso!");
				}else{
					request.setAttribute("mensagem", "Você não selecionou o Termo do Eixo Foco adequadamente");
				}
			}
			
		 }catch(Exception ex){
			 ex.printStackTrace();
			 request.setAttribute("mensagem", "Erro de conexão com o Banco de Dados!");
		}
    	  return  map.findForward(fALUNOESTUDOCASOHIPOTESES);
	}
	
	public ActionForward editarIntervencaoDiagnostico(ActionMapping map, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
	
		try {
			String idIntervencaoDiagnostico = ((DynaActionForm)form).getString("idIntervencaoDiagnostico");	
			String idMetaDiagnostico = ((DynaActionForm)form).getString("idMetaDiagnostico");
			String idDiagnostico = ((DynaActionForm)form).getString("idDiagnostico");
			String termo4autocomplete = ((DynaActionForm)form).getString("termo4autocomplete");
			String texto = ((DynaActionForm)form).getString("texto");
			
			if(idIntervencaoDiagnostico != null && !idIntervencaoDiagnostico.equals("")){
				Meta meta = new Meta(Integer.parseInt(idMetaDiagnostico));
				if(termo4autocomplete.contains("[") && termo4autocomplete.contains("]")){
					String idTermo = termo4autocomplete.substring(termo4autocomplete.indexOf("[")+1, termo4autocomplete.indexOf("]"));
					Cipe cipe = new Cipe(Integer.parseInt(idTermo));
					
					Intervencao intervencaoEdit = new Intervencao(Integer.parseInt(idIntervencaoDiagnostico), meta, cipe, texto);
					intervencaoEdit = fachada.editarIntervencaoMetaDiagnostico(intervencaoEdit);
					
					fachada.atualizar();
					fachada.limparSessaoHibernate();
					ArcoMaguerezEstudoDeCaso arcoMaguerez = (ArcoMaguerezEstudoDeCaso)  request.getSession().getAttribute("arcoMaguerez");
					List<Diagnostico> diagnosticos = fachada.buscarDiagnosticoPorHipotesesDeSolucao(arcoMaguerez.getHipotesesDeSolucao());
					request.getSession().setAttribute("diagnosticos", diagnosticos);
					
					 request.setAttribute("mensagem", "Intervenção editada com sucesso!");
				}else{
					request.setAttribute("mensagem", "Você não selecionou o Termo do Eixo Foco adequadamente");
				}
			}
			
		 }catch(Exception ex){
			 ex.printStackTrace();
			 request.setAttribute("mensagem", "Erro de conexão com o Banco de Dados!");
		}
    	  return  map.findForward(fALUNOESTUDOCASOHIPOTESES);
	}
	
	public ActionForward removerIntervencaoDiagnostico(ActionMapping map, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
	
		try {
			String idIntervencaoDiagnostico = ((DynaActionForm)form).getString("idIntervencaoDiagnostico");
			if(idIntervencaoDiagnostico != null  && !idIntervencaoDiagnostico.equals("")){
				Intervencao intervencaoRemover = new Intervencao(Integer.parseInt(idIntervencaoDiagnostico));
				fachada.removerIntervencaoDiagnostico(intervencaoRemover);
				
				fachada.atualizar();
				request.setAttribute("mensagem", "Intervenção removida com sucesso!");
			}
		
		}catch(Exception ex){
			 ex.printStackTrace();
			 request.setAttribute("mensagem", "Erro de conexão com o Banco de Dados!");
		}
    	  return  map.findForward(fALUNOESTUDOCASOHIPOTESESREFRESH);
	}
	
	public ActionForward mostrarTelaAplicacao(ActionMapping map, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		ActionForward retorno = null;
		try{
			
			ArcoMaguerezEstudoDeCaso arcoMaguerez = (ArcoMaguerezEstudoDeCaso)  request.getSession().getAttribute("arcoMaguerez");
			if(arcoMaguerez.getAplicacao() == null){
				arcoMaguerez.setAplicacao(new Aplicacao(""));
				arcoMaguerez = fachada.atualizarArcoMaguerez(arcoMaguerez);
				request.getSession().setAttribute("arcoMaguerez", arcoMaguerez);
			}
			
			if(arcoMaguerez.getFaseDoArco() >= ArcoMaguerezEstudoDeCaso.APLICACAO){
				retorno =  map.findForward(fALUNOESTUDOCASOAPLICACAO);
			}else{
				request.setAttribute("mensagem", "Você ainda não finalizou a fase anterior para visualizar esta Fase do Arco");
				if(arcoMaguerez.getFaseDoArco() == ArcoMaguerezEstudoDeCaso.OBS_REALIDADE){
					retorno =  map.findForward(fALUNOESTUDOCASOOBSREALIDADE);
				}else if(arcoMaguerez.getFaseDoArco() == ArcoMaguerezEstudoDeCaso.PONTOS_CHAVE){
					retorno =  map.findForward(fALUNOESTUDOCASOPONTOSCHAVE);
				}else if(arcoMaguerez.getFaseDoArco() == ArcoMaguerezEstudoDeCaso.TEORIZACAO){
					retorno =  map.findForward(fALUNOESTUDOCASOTEORIZACAO);
				}else{
					retorno = map.findForward(fALUNOESTUDOCASOHIPOTESES);
				}
			}
		}catch(Exception ex){
			ex.printStackTrace();
			request.setAttribute("mensagem", "Erro de conexão com o Banco de Dados!");
		}	
		
		return retorno;
	}
	
	public ActionForward salvarAplicacao(ActionMapping map, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		ActionForward retorno = map.findForward(fALUNOESTUDOCASOAPLICACAO);
		try{
			String texto = ((DynaActionForm)form).getString("texto");
			if(texto != null && !texto.equals("")){
				
				ArcoMaguerezEstudoDeCaso arcoMaguerez = (ArcoMaguerezEstudoDeCaso)  request.getSession().getAttribute("arcoMaguerez");
				arcoMaguerez.getAplicacao().setTexto(texto);
				Aplicacao aplicacao = fachada.atualizarAplicacao(arcoMaguerez.getAplicacao());
				arcoMaguerez.setAplicacao(aplicacao);
				arcoMaguerez = fachada.atualizarArcoMaguerez(arcoMaguerez);
				request.getSession().setAttribute("arcoMaguerez", arcoMaguerez);
			}
			
			request.setAttribute("mensagem", "Dados salvos com sucesso!");
		}catch(Exception ex){
			ex.printStackTrace();
			request.setAttribute("mensagem", "Erro de conexão com o Banco de Dados!");
		}	
		
		return retorno;
	}
	
	public ActionForward avancarAplicacao(ActionMapping map, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		ActionForward retorno = map.findForward(fALUNOESTUDOCASOAPLICACAO);
		try{
			String texto = ((DynaActionForm)form).getString("texto");
			if(texto != null && !texto.equals("")){
				
				ArcoMaguerezEstudoDeCaso arcoMaguerez = (ArcoMaguerezEstudoDeCaso)  request.getSession().getAttribute("arcoMaguerez");
				arcoMaguerez.setFaseDoArco(ArcoMaguerezEstudoDeCaso.FINALIZADO);
				arcoMaguerez.getAplicacao().setTexto(texto);
				Aplicacao aplicacao = fachada.atualizarAplicacao(arcoMaguerez.getAplicacao());
				arcoMaguerez.setAplicacao(aplicacao);
				arcoMaguerez = fachada.atualizarArcoMaguerez(arcoMaguerez);
				request.getSession().setAttribute("arcoMaguerez", arcoMaguerez);
			}
			
			request.setAttribute("mensagem", "Fase Aplicação à Realidade concluída com sucesso!");
		}catch(Exception ex){
			ex.printStackTrace();
			request.setAttribute("mensagem", "Erro de conexão com o Banco de Dados!");
		}	
		
		return retorno;
	}
	
	public ActionForward baixarArquivo(ActionMapping map, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
	
			try 
			{
				String id = ((DynaActionForm)form).getString("idArquivo");
				ServletOutputStream out = response.getOutputStream();
				
				Arquivo download = fachada.getArquivoPorId(Integer.parseInt(id));
				
				response.setContentType(download.getExtensao());
				response.setHeader("Content-Disposition","attachment;filename="+download.getNomeArqv());
				out.write(download.getDadosArqv());
				out.flush();
				out.close();
		  }catch(Exception ex){
			  ex.printStackTrace();
			 request.setAttribute("mensagem", "Erro de conexão com o Banco de Dados!");
		  }
			  return null;
	}
	
	public ActionForward mostrarTelaOpniaoSobreCurso(ActionMapping map, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
	
		return map.findForward(fALUNOOPNIAOCURSO);
	}
	
	public ActionForward salvarOpniaoSobreCurso(ActionMapping map, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
	
			try 
			{
				String idMatriculaCursoAluno = ((DynaActionForm)form).getString("idMatriculaCursoAluno");
				String opniaoProcessoAprendizagem = ((DynaActionForm)form).getString("opniaoProcessoAprendizagem");
				String opniaoExperiencia = ((DynaActionForm)form).getString("opniaoExperiencia");
				
				MatriculaCursoAluno matricula = (MatriculaCursoAluno) request.getSession().getAttribute("matricula");
				if(idMatriculaCursoAluno != null && !idMatriculaCursoAluno.equals("") && 
						matricula.getId() == Integer.parseInt(idMatriculaCursoAluno)){
					if(opniaoProcessoAprendizagem != null && !opniaoProcessoAprendizagem.equals("")){
						matricula.setOpniaoExperiencia(opniaoExperiencia);
					}
					if(opniaoProcessoAprendizagem != null && !opniaoProcessoAprendizagem.equals("")){
						matricula.setOpniaoProcessoAprendizagem(opniaoProcessoAprendizagem);
					}
					fachada.atualizarMatriculaCursoAluno(matricula);
					request.setAttribute("matricula", matricula);
				}
				
				request.setAttribute("mensagem", "Opnião Salva com sucesso!");
		  }catch(Exception ex){
			  ex.printStackTrace();
			 request.setAttribute("mensagem", "Erro de conexão com o Banco de Dados!");
		  }
			  return map.findForward(fALUNOOPNIAOCURSO);
	}
	
	public ActionForward mostrarTelaFeedbackCurso(ActionMapping map, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
	
		try{
			
			MatriculaCursoAluno matricula = (MatriculaCursoAluno)request.getSession().getAttribute("matricula");
			List<ArcoMaguerezEstudoDeCaso> arcosMaguerez = fachada.buscarArcosMaguerezPorCursoEAluno(matricula, matricula.getCurso());
			request.getSession().setAttribute("arcosMaguerez", arcosMaguerez);
			
		}catch(Exception ex){
			ex.printStackTrace();
			request.setAttribute("mensagem", "Erro de conexão com o Banco de Dados!");
		}
			  return map.findForward(fALUNOFEEDBACKCURSO);
	}
	
	public ActionForward pesquisarFeedBackEstudoCaso(ActionMapping map, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
	
		try{
			
			String idEstudoCaso = ((DynaActionForm)form).getString("idEstudoCaso");
			List<EstudoDeCaso> estudosCasos = (List<EstudoDeCaso>) request.getSession().getAttribute("estudosDeCasos");
			MatriculaCursoAluno matricula = (MatriculaCursoAluno) request.getSession().getAttribute("matricula");
			EstudoDeCaso estudoEscolhido = null;
			for (EstudoDeCaso estudoDeCaso : estudosCasos) {
				if(estudoDeCaso.getId() == Integer.parseInt(idEstudoCaso)){
					estudoEscolhido = estudoDeCaso;
				}
			}
			ArcoMaguerezEstudoDeCaso arcoMaguerez = fachada.getArcoMaguerezPorMatriculaCursoEstudoCaso(matricula, estudoEscolhido);
			
			PrintWriter print = response.getWriter();
			print.println("<b>Pontos-Chaves:</b>");
			print.println("<br />");
			print.println("Comentários:");
			print.println("<br />");
			if(arcoMaguerez != null && arcoMaguerez.getPontosChave() != null && arcoMaguerez.getPontosChave().getAvaliacaoProfessor() != null){
				print.println(arcoMaguerez.getPontosChave().getAvaliacaoProfessor().getComentario());
				print.println("<br />");
				print.println("Nota:");
				print.println("<br />");
				print.println(arcoMaguerez.getPontosChave().getAvaliacaoProfessor().getNota());
			}else{
				print.println("");
				print.println("<br />");
				print.println("Nota:");
				print.println("<br />");
				print.println("");
			}
			print.println("<br />");
			print.println("<b>Teorização:</b>");
			print.println("<br />");
			print.println("Comentários:");
			print.println("<br />");
			if(arcoMaguerez != null && arcoMaguerez.getTeorizacao() != null &&  arcoMaguerez.getTeorizacao().getAvaliacaoProfessor() != null){
				print.println(arcoMaguerez.getTeorizacao().getAvaliacaoProfessor().getComentario());
				print.println("<br />");
				print.println("Nota:");
				print.println("<br />");
				print.println(arcoMaguerez.getTeorizacao().getAvaliacaoProfessor().getNota());
			}else{
				print.println("");
				print.println("<br />");
				print.println("Nota:");
				print.println("<br />");
				print.println("");
			}
			print.println("<br />");
			print.println("<b>Hipóteses de Solução:</b>");
			print.println("<br />");
			print.println("Comentários:");
			print.println("<br />");
			if(arcoMaguerez != null && arcoMaguerez.getHipotesesDeSolucao() != null &&  arcoMaguerez.getHipotesesDeSolucao().getAvaliacaoProfessor() != null){
				print.println(arcoMaguerez.getHipotesesDeSolucao().getAvaliacaoProfessor().getComentario());
				print.println("<br />");
				print.println("Nota:");
				print.println("<br />");
				print.println(arcoMaguerez.getHipotesesDeSolucao().getAvaliacaoProfessor().getNota());
			}else{
				print.println("");
				print.println("<br />");
				print.println("Nota:");
				print.println("<br />");
				print.println("");
			}
			
		}catch(Exception ex){
			ex.printStackTrace();
			request.setAttribute("mensagem", "Erro de conexão com o Banco de Dados!");
		}
			  return null;
	}
	
	
	private void carregarMateriaisAmbulatorio(HttpServletRequest request) {
		List<Material> materiaisGeral = fachada.getTodosMateriaisPorTipo(Material.GERAL);
		List<Material> materiaisClinico = fachada.getTodosMateriaisPorTipo(Material.USO_CLINICO);
		List<Material> materiaisConcorrente = fachada.getTodosMateriaisPorTipo(Material.USO_CORRENTE);
		
		MatriculaCursoAluno matricula = (MatriculaCursoAluno) request.getSession().getAttribute("matricula");
		Ambulatorio ambulatorio = matricula.getAmbulatorio();
		
		
		List<Material> matGeralAdd = ambulatorio.getTodosMateriaisPorTipo(TipoMaterialEnum.GERAL);
		List<Material> matUsoClinicoAdd = ambulatorio.getTodosMateriaisPorTipo(TipoMaterialEnum.USO_CLINICO);
		List<Material> matUsoCorrenteAdd = ambulatorio.getTodosMateriaisPorTipo(TipoMaterialEnum.USO_CORRENTE);
		materiaisGeral.removeAll(matGeralAdd);
		materiaisClinico.removeAll(matUsoClinicoAdd);
		materiaisConcorrente.removeAll(matUsoCorrenteAdd);
		
		request.getSession().setAttribute("materiaisGeral", materiaisGeral);
		request.getSession().setAttribute("materiaisClinico", materiaisClinico);
		request.getSession().setAttribute("materiaisConcorrente", materiaisConcorrente);
		
		request.getSession().setAttribute("matGeralAdd", matGeralAdd);
		request.getSession().setAttribute("matUsoClinicoAdd", matUsoClinicoAdd);
		request.getSession().setAttribute("matUsoCorrenteAdd", matUsoCorrenteAdd);
	}
	
	private boolean validarArquivo(String titulo){
		boolean retorno = false;
		
		if(titulo.toUpperCase().endsWith(".PDF")){
			retorno = true;
		}else if(titulo.toUpperCase().endsWith(".DOC")){
			retorno = true;
		}else if(titulo.toUpperCase().endsWith(".DOCX")){
			retorno = true;
		}
		
		return retorno;
	}
	
	
	
}
