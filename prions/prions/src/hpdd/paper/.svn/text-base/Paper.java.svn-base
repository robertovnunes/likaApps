package hpdd.paper;

import hpdd.notification.Notification;

import java.io.Serializable;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.OnDelete;
import org.hibernate.annotations.OnDeleteAction;

@SuppressWarnings("serial")
@Entity
@Table(name = "paper")
public class Paper implements Serializable {

	@Id
	@OneToOne(fetch = FetchType.EAGER)
	@OnDelete(action = OnDeleteAction.CASCADE)
	@JoinColumn(name = "cod_paper", nullable = false)
	private Notification notification;

	@Column(name = "id")
	private String id;

	@Column(name = "paper_date")
	@Temporal(TemporalType.DATE)
	private Date paperDate;

	private String gender;

	private String age;

	@Column(name = "country")
	private String country;

	@Column(name = "doi")
	private String DOI;

	@Column(name = "link")
	private String link;

	@Column(name = "eeg")
	private String EEG;

	@Column(name = "result_eeg")
	private String Res_EEG;

	@Column(name = "mri")
	private String MRI;

	@Column(name = "result_mri")
	private String Res_MRI;

	@Column(name = "prot14_3")
	private String prot14_3;

	@Column(name = "result_prot14_3")
	private String Res_prot14_3;

	@Column(name = "genetic")
	private String genetic;

	@Column(name = "result_genetic")
	private String resGenetic;

	@Column(name = "necropsy")
	private String necropsy;

	@Column(name = "result_necropsy")
	private String resNecropsy;

	public Notification getNotification() {
		return notification;
	}

	public void setNotification(Notification notification) {
		this.notification = notification;
	}

	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public Date getPaperDate() {
		return paperDate;
	}

	public void setPaperDate(Date paperDate) {
		this.paperDate = paperDate;
	}

	public String getGender() {
		return gender;
	}

	public void setGender(String gender) {
		this.gender = gender;
	}

	public String getAge() {
		return age;
	}

	public String getCountry() {
		return country;
	}

	public void setCountry(String country) {
		this.country = country;
	}

	public void setAge(String age) {
		this.age = age;
	}

	public String getDOI() {
		return DOI;
	}

	public void setDOI(String dOI) {
		DOI = dOI;
	}

	public String getLink() {
		return link;
	}

	public void setLink(String link) {
		this.link = link;
	}

	public String getEEG() {
		return EEG;
	}

	public void setEEG(String eEG) {
		EEG = eEG;
	}

	public String getRes_EEG() {
		return Res_EEG;
	}

	public void setRes_EEG(String res_EEG) {
		Res_EEG = res_EEG;
	}

	public String getMRI() {
		return MRI;
	}

	public void setMRI(String mRI) {
		MRI = mRI;
	}

	public String getRes_MRI() {
		return Res_MRI;
	}

	public void setRes_MRI(String res_MRI) {
		Res_MRI = res_MRI;
	}

	public String getProt14_3() {
		return prot14_3;
	}

	public void setProt14_3(String prot14_3) {
		this.prot14_3 = prot14_3;
	}

	public String getRes_prot14_3() {
		return Res_prot14_3;
	}

	public void setRes_prot14_3(String res_prot14_3) {
		Res_prot14_3 = res_prot14_3;
	}

	public String getGenetic() {
		return genetic;
	}

	public void setGenetic(String genetic) {
		this.genetic = genetic;
	}

	public String getResGenetic() {
		return resGenetic;
	}

	public void setResGenetic(String resGenetic) {
		this.resGenetic = resGenetic;
	}

	public String getNecropsy() {
		return necropsy;
	}

	public void setNecropsy(String necropsy) {
		this.necropsy = necropsy;
	}

	public String getResNecropsy() {
		return resNecropsy;
	}

	public void setResNecropsy(String resNecropsy) {
		this.resNecropsy = resNecropsy;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((DOI == null) ? 0 : DOI.hashCode());
		result = prime * result + ((EEG == null) ? 0 : EEG.hashCode());
		result = prime * result + ((MRI == null) ? 0 : MRI.hashCode());
		result = prime * result + ((Res_EEG == null) ? 0 : Res_EEG.hashCode());
		result = prime * result + ((Res_MRI == null) ? 0 : Res_MRI.hashCode());
		result = prime * result
				+ ((Res_prot14_3 == null) ? 0 : Res_prot14_3.hashCode());
		result = prime * result + ((age == null) ? 0 : age.hashCode());
		result = prime * result + ((country == null) ? 0 : country.hashCode());
		result = prime * result + ((gender == null) ? 0 : gender.hashCode());
		result = prime * result + ((genetic == null) ? 0 : genetic.hashCode());
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		result = prime * result + ((link == null) ? 0 : link.hashCode());
		result = prime * result
				+ ((necropsy == null) ? 0 : necropsy.hashCode());
		result = prime * result
				+ ((notification == null) ? 0 : notification.hashCode());
		result = prime * result
				+ ((paperDate == null) ? 0 : paperDate.hashCode());
		result = prime * result
				+ ((prot14_3 == null) ? 0 : prot14_3.hashCode());
		result = prime * result
				+ ((resGenetic == null) ? 0 : resGenetic.hashCode());
		result = prime * result
				+ ((resNecropsy == null) ? 0 : resNecropsy.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Paper other = (Paper) obj;
		if (DOI == null) {
			if (other.DOI != null)
				return false;
		} else if (!DOI.equals(other.DOI))
			return false;
		if (EEG == null) {
			if (other.EEG != null)
				return false;
		} else if (!EEG.equals(other.EEG))
			return false;
		if (MRI == null) {
			if (other.MRI != null)
				return false;
		} else if (!MRI.equals(other.MRI))
			return false;
		if (Res_EEG == null) {
			if (other.Res_EEG != null)
				return false;
		} else if (!Res_EEG.equals(other.Res_EEG))
			return false;
		if (Res_MRI == null) {
			if (other.Res_MRI != null)
				return false;
		} else if (!Res_MRI.equals(other.Res_MRI))
			return false;
		if (Res_prot14_3 == null) {
			if (other.Res_prot14_3 != null)
				return false;
		} else if (!Res_prot14_3.equals(other.Res_prot14_3))
			return false;
		if (age == null) {
			if (other.age != null)
				return false;
		} else if (!age.equals(other.age))
			return false;
		if (country == null) {
			if (other.country != null)
				return false;
		} else if (!country.equals(other.country))
			return false;
		if (gender == null) {
			if (other.gender != null)
				return false;
		} else if (!gender.equals(other.gender))
			return false;
		if (genetic == null) {
			if (other.genetic != null)
				return false;
		} else if (!genetic.equals(other.genetic))
			return false;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		if (link == null) {
			if (other.link != null)
				return false;
		} else if (!link.equals(other.link))
			return false;
		if (necropsy == null) {
			if (other.necropsy != null)
				return false;
		} else if (!necropsy.equals(other.necropsy))
			return false;
		if (notification == null) {
			if (other.notification != null)
				return false;
		} else if (!notification.equals(other.notification))
			return false;
		if (paperDate == null) {
			if (other.paperDate != null)
				return false;
		} else if (!paperDate.equals(other.paperDate))
			return false;
		if (prot14_3 == null) {
			if (other.prot14_3 != null)
				return false;
		} else if (!prot14_3.equals(other.prot14_3))
			return false;
		if (resGenetic == null) {
			if (other.resGenetic != null)
				return false;
		} else if (!resGenetic.equals(other.resGenetic))
			return false;
		if (resNecropsy == null) {
			if (other.resNecropsy != null)
				return false;
		} else if (!resNecropsy.equals(other.resNecropsy))
			return false;
		return true;
	}

}
